{"version":3,"sources":["components/SearchBar.js","components/fetch.js","components/EachRecipe.js","components/RecipeList.js","App.js","RecipeDetail.js","components/Header.js","serviceWorker.js","index.js"],"names":["SearchBar","props","className","onSubmit","e","onClick","type","value","searchVal","onChange","required","fetchRecipes","recipe","a","url","fetch","response","json","result","localStorage","setItem","JSON","stringify","hits","EachRecipe","index","label","image","src","alt","length","substring","to","RecipeList","recipes","map","item","App","handleChange","setState","target","searchRecipes","preventDefault","state","console","log","isRecived","getItem","parse","this","onLoaded","runAfterImagesLoaded","onTimeout","runTimeoutFunction","timeout","Component","RecipeDetail","temmpRecipe","id","useParams","filter","ingredientLines","Header","Boolean","window","location","hostname","match","onbeforeunload","clear","ReactDOM","render","StrictMode","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e54aff99.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBar = (props) => {\r\n    return (\r\n        <form className=\"search-bar\" onSubmit={e => props.onClick(e)}>\r\n            <input\r\n                type=\"text\"\r\n                value={props.searchVal}\r\n                onChange={e => props.onChange(e)}\r\n                required/>\r\n            <button>search</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SearchBar; ","\r\n\r\nexport const fetchRecipes = async recipe => {\r\n    const appId = \"0a886643\";\r\n    const key = \"de87a8e0ff945e5d71564ed45bbac0f4\";\r\n    const url = `https://api.edamam.com/search?q=${recipe}&app_id=${appId}&app_key=${key}&from=0&to=10`;\r\n    //Api call promise\r\n    try {\r\n      let response = await fetch(url);\r\n      let result = await response.json();\r\n      localStorage.setItem(\"recipes\", JSON.stringify(result.hits));\r\n      return result.hits;\r\n    } catch (error) {\r\n      let response = [];\r\n      return response;\r\n    }\r\n  };","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst EachRecipe = (props) => {\r\n    const {index,label,image} = props;\r\n    return (\r\n        <div key={index} className=\"recipe-item\">\r\n            <img src={image} alt={label} />\r\n            <h3>{label.length>18?`${label.substring(0, 17)}...`:`${label}`}</h3>\r\n            <Link to={`/react-mini-projects/recipe-app/recipe/${label}`} >\r\n                <button className=\"btn\">        \r\n                    About\r\n                </button>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EachRecipe;","import React from 'react';\r\nimport EachRecipe from './EachRecipe';\r\n\r\nconst RecipeList = (props) => {\r\n\r\n    return (\r\n        <div className=\"recipe-container\">\r\n            {\r\n                props.recipes.map((item,index)=>{\r\n                    const {label}=item.recipe;\r\n                    const {image}=item.recipe;\r\n                    return <EachRecipe key={index} image={image} label={label} />;\r\n                    \r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RecipeList;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport SearchBar from './components/SearchBar';\r\nimport {fetchRecipes} from './components/fetch';\r\nimport RecipeList from './components/RecipeList';\r\nimport OnImagesLoaded from 'react-on-images-loaded';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      recipes: [],\r\n      isRecived: false,\r\n      value: ''\r\n    };\r\n  }\r\n\r\n  async componentDidMount(){\r\n    if(localStorage.getItem('recipes')){\r\n      let recipes = JSON.parse(localStorage.getItem('recipes'));\r\n      this.setState({\r\n        recipes,\r\n        isRecived: true\r\n      });\r\n      return;\r\n    }\r\n      let recipes = await fetchRecipes('egg rice');\r\n      this.setState({\r\n        recipes,\r\n        isRecived: true\r\n      });\r\n  }\r\n \r\n  handleChange = (e) => {\r\n    this.setState({\r\n        value: e.target.value\r\n    })\r\n  }\r\n  searchRecipes = async (e) =>{\r\n    e.preventDefault();\r\n    let recipes = await fetchRecipes(this.state.value);\r\n    console.log(recipes);\r\n      this.setState({\r\n        recipes,\r\n        isRecived: true\r\n      });\r\n  }\r\n  render() {\r\n    if(!this.state.isRecived){\r\n      return (\r\n        <div>Loading...</div>\r\n      )\r\n    }\r\n    return (\r\n      <OnImagesLoaded\r\n  onLoaded={this.runAfterImagesLoaded}\r\n  onTimeout={this.runTimeoutFunction}\r\n  timeout={7000}\r\n>\r\n      <div className=\"app\">\r\n        <SearchBar\r\n          searchVal={this.state.value}\r\n          onChange={this.handleChange}\r\n          onClick={this.searchRecipes}\r\n        />\r\n        <RecipeList recipes={this.state.recipes} />       \r\n      </div>\r\n      </OnImagesLoaded>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport {Link,useParams} from 'react-router-dom';\r\n\r\nfunction RecipeDetail() {\r\n      let temmpRecipe = JSON.parse(localStorage.getItem('recipes'));\r\n      let { id } = useParams();\r\n      let currentRecipe = temmpRecipe.filter(item =>{\r\n            return item.recipe.label === id \r\n      });\r\n      let {label,image,ingredientLines} = currentRecipe[0].recipe;\r\n        return (\r\n        <>\r\n        <div className=\"recipe-Container\">\r\n            <div className=\"img-container\">\r\n                <img src={image} alt=\"food\" />\r\n            </div>\r\n            <div className=\"recipe-details\">\r\n                <h1>{label}</h1>\r\n                <ol>\r\n                    {ingredientLines.map((item,index) => {\r\n                        return <li key={index}>{item}</li>;\r\n                    })}\r\n                </ol>\r\n            </div>\r\n            <Link to=\"/react-mini-projects/recipe-app/\">\r\n                <div className=\"home-Link\">\r\n                    Home\r\n                </div>\r\n            </Link>\r\n        </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default RecipeDetail;","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>Recipe App</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport RecipeDetail from './RecipeDetail';\r\nimport Header from './components/Header';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router,Switch,Route} from 'react-router-dom';\r\n\r\nwindow.onbeforeunload = function() {\r\n  localStorage.clear();\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path=\"/react-mini-projects/recipe-app/\" component={App} />\r\n        <Route exact path=\"/react-mini-projects/recipe-app/recipe/:id\" component={RecipeDetail} />\r\n      </Switch>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}