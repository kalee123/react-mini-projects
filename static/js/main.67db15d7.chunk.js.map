{"version":3,"sources":["component/SetTimer.js","App.js","index.js"],"names":["SetTimer","props","data","type","title","count","lengthHandler","className","id","onClick","App","useState","breakCount","setBreak","sessionCount","setSession","timerType","setType","clockTime","setTime","clockState","setClockState","beep","useRef","calculateLength","oper","lenType","breakData","length","sessionData","useEffect","interval","setInterval","clearInterval","current","play","currentTime","minutes","Math","floor","seconds","clockify","pause","preload","src","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67db15d7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SetTimer = (props) => {\r\n  const { type, title, count, lengthHandler } = { ...props.data };\r\n\r\n  return (\r\n    <div className=\"session\">\r\n      <h2 id={`${type}-label`}>{title}</h2>\r\n      <div className=\"session-btn\">\r\n        <button id={`${type}-increment`} onClick={() => lengthHandler(1)}>\r\n          <i className=\"fa fa-plus\"></i>\r\n        </button>\r\n        <div id={`${type}-length`}>{count}</div>\r\n        <button id={`${type}-decrement`} onClick={() => lengthHandler(0)}>\r\n          <i className=\"fa fa-minus\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default SetTimer;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport SetTimer from \"./component/SetTimer\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [breakCount, setBreak] = useState(5);\r\n  const [sessionCount, setSession] = useState(25);\r\n  const [timerType, setType] = useState(\"Session\");\r\n  const [clockTime, setTime] = useState(1500);\r\n  const [clockState, setClockState] = useState(false);\r\n  const beep = useRef();\r\n\r\n  const calculateLength = (oper, lenType) => {\r\n    if (lenType === \"break\") {\r\n      if (oper === 0) {\r\n        if (breakCount !== 1) return breakCount - 1;\r\n        return 1;\r\n      }\r\n      if (breakCount !== 60) return breakCount + 1;\r\n      return 60;\r\n    } else {\r\n      if (oper === 0) {\r\n        if (sessionCount !== 1) return sessionCount - 1;\r\n        return 1;\r\n      }\r\n      if (sessionCount !== 60) return sessionCount + 1;\r\n      return 60;\r\n    }\r\n  };\r\n\r\n  const handleBrkLength = (oper) => {\r\n    if (!clockState) {\r\n      let length = calculateLength(oper, \"break\");\r\n      setBreak(length);\r\n    }\r\n  };\r\n\r\n  const handleSesLength = (oper) => {\r\n    if (!clockState) {\r\n      let length = calculateLength(oper, \"session\");\r\n      setSession(length);\r\n      setTime(length * 60);\r\n    }\r\n  };\r\n\r\n  /* constant object for break and session length component */\r\n  const breakData = {\r\n    type: \"break\",\r\n    title: \"Break Length\",\r\n    count: breakCount,\r\n    lengthHandler: handleBrkLength\r\n  };\r\n  const sessionData = {\r\n    type: \"session\",\r\n    title: \"Session Length\",\r\n    count: sessionCount,\r\n    lengthHandler: handleSesLength\r\n  };\r\n\r\n  const clockify = () => {\r\n    let minutes = Math.floor(clockTime / 60);\r\n    let seconds = clockTime - minutes * 60;\r\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    return minutes + \":\" + seconds;\r\n  };\r\n\r\n  const resetDefault = () => {\r\n    setBreak(5);\r\n    setSession(25);\r\n    setType(\"Session\");\r\n    setTime(1500);\r\n    setClockState(false);\r\n    beep.current.pause();\r\n    beep.current.currentTime = 0;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (clockState && clockTime > 0) {\r\n      const interval = setInterval(() => {\r\n        setTime(clockTime - 1);\r\n      }, 1000);\r\n      return () => clearInterval(interval);\r\n    } else if (clockState && clockTime === 0) {\r\n      beep.current.play();\r\n      beep.current.currentTime = 0;\r\n      if (timerType === \"Session\") {\r\n        setType(\"Break\");\r\n        setTime(breakCount * 60);\r\n      } else {\r\n        setType(\"Session\");\r\n        setTime(sessionCount * 60);\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"header\">\r\n        <h1>Promodoro Clock</h1>\r\n      </div>\r\n      <div className=\"flex-container\">\r\n        <div className=\"set-timer\">\r\n          <SetTimer data={breakData} />\r\n          <SetTimer data={sessionData} />\r\n        </div>\r\n        <div className=\"timer\">\r\n          <div className=\"timer-wrapper\">\r\n            <div id=\"timer-label\">{timerType}</div>\r\n            <div id=\"time-left\">{clockify()}</div>\r\n          </div>\r\n          <div>\r\n            <button id=\"start_stop\" onClick={() => setClockState(!clockState)}>\r\n              <i className={`fa fa-${clockState ? \"pause\" : \"play\"}`}></i>\r\n            </button>\r\n            <button id=\"reset\" onClick={resetDefault}>\r\n              <i className=\"fa fa-refresh\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <audio\r\n        id=\"beep\"\r\n        preload=\"auto\"\r\n        src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\r\n        ref={beep}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}